# Path to Oh-My-Zsh installation
export ZSH=~/.oh-my-zsh

# Theme Settings (Oh-My-Zsh)
ZSH_THEME="robbyrussell"
DEFAULT_USER="jcanseco" # Remove username from status

# Plugin Settings (Oh-My-Zsh)
plugins=(git tmux)
ZSH_TMUX_AUTOSTART="true" # Launch tmux at terminal startup

# Load the Oh-My-Zsh script (must go after all Oh-My-Zsh settings)
source $ZSH/oh-my-zsh.sh

# Aliases
alias v="vim"
alias vim="nvim"
alias za="zathura --fork"
alias tgz="tar -xvzf" # Unzip .tar.gz files
alias exp="nemo ." # Open file explorer in current directory

alias cd..="cd .."
alias gti="git"
alias igt="git"
alias gt="git"
alias got="git"

alias vv="vim *(.)" # Open all files in current directory in vim, excluding directories
alias vvv="vim **/*(.)" # Open all files recursively in vim, excluding directories
alias vdot="vim ~/.dotfiles/**/*(.)" # Open all files in .dotfiles in vim, excluding directories

alias h="cd ~"
alias dot="cd ~/.dotfiles/"
alias ws="cd ~/Workspace/"
alias ql="cd ~/Quicklinks/"
alias doc="cd ~/Documents/"
alias down="cd ~/Downloads/"

alias cl="clear"
alias cla="all 'clear'"

alias q="exit"
alias qa="all 'exit'"

alias ls="ls --color=auto --group-directories-first"
alias tree="tree --dirsfirst"

alias mkdir="mkdir -p" # Automatically create intermediate non-existing directories when needed

alias rl="source ~/.zshrc" # Reload the zsh configuration file
alias rla="all 'source ~/.zshrc'"

# Options
setopt CHASE_LINKS # Resolve symlinks when using cd

# Set-up zsh to automatically list directory contents whenever you change directories
function chpwd() {
  ls
}

# Search for files within the current directory whose filename contains a given string
# Usage: search <filename>
function search() {
  find . -iname "*$@*" | less
}

# Create a symlink to the current directory in ~/Quicklinks/
# Usage: mkql <name of quicklink>
function mkql() {
  if [ -d ~/Quicklinks/ ]; then
    ln -s "$(pwd -P)" ~/Quicklinks/"$1"
  else
    echo "Error: ~/Quicklinks/ does not exist."
  fi
}

# Execute a command in all tmux panes
# Usage: all <command>
# Warning: does not work very well if you have vim open in one of the panes; it'll just type out the command letter by letter in vim
function all() {
  local cmd="$*"
  local active_pane_id=$TMUX_PANE
  local pane_ids=($(tmux list-panes -F '#{pane_id}'))
  for pane_id in $pane_ids; do
    if [[ $pane_id == $active_pane_id ]]; then
      eval $cmd
    else
      tmux send-keys -t $pane_id "$cmd" C-m
    fi
  done
}
