# Load Zgen for Plugin Management
source ~/.zgen/zgen.zsh

# Plugin Configs (must go before plugins are loaded)
ZSH_TMUX_AUTOSTART="true"

# Plugins
zgen oh-my-zsh # Library for Oh-My-Zsh themes and plugins
zgen oh-my-zsh plugins/tmux # Tmux integration
zgen oh-my-zsh plugins/sudo # Quickly add 'sudo' to commands
zgen oh-my-zsh plugins/colored-man-pages # Colorize man pages
zgen load arzzen/calc.plugin.zsh # Calculator for the shell
zgen load Tarrasch/zsh-bd # Jump back directories more easily
zgen load zsh-users/zsh-autosuggestions # As-you-type autosuggestions
zgen load hlissner/zsh-autopair # Auto-close and delete matching delimiters

# Theme (must go after the Oh-My-Zsh library is loaded since this is an Oh-My-Zsh theme)
source ~/.dotfiles/zsh/robbyrussell-modified.zsh-theme

# Aliases
alias v="vim"
alias vim="nvim"
alias za="zathura --fork"
alias tgz="tar -xvzf"
alias open="nemo"

alias cd..="cd .."
alias gti="git"
alias igt="git"
alias gt="git"
alias got="git"

alias vdot="vvr ~/.dotfiles"

alias dot="cd ~/.dotfiles/"
alias ws="cd ~/Workspace/"
alias ql="cd ~/Quicklinks/"
alias doc="cd ~/Documents/"
alias down="cd ~/Downloads/"

alias cl="clear"
alias cla="all 'clear'"

alias q="exit"
alias qa="all 'exit'"

alias ls="ls --color=auto --group-directories-first"
alias tree="tree --dirsfirst"

alias mkdir="mkdir -p" # Automatically create intermediate non-existing directories when needed

alias rl="source ~/.zshrc" # Reload the zsh configuration file
alias rla="all 'source ~/.zshrc'"

# Key Bindings
bindkey '^ ' forward-word # Move cursor forward by word using 'Ctrl + Space'; useful for partial acceptance of autosuggestions

# Options
setopt CHASE_LINKS # Resolve symlinks when using cd

# Set-up zsh to automatically list directory contents whenever you change directories
function chpwd() {
  ls
}

# Open all files in the given directories in vim, excluding directories
# Usage: vv <directories> (defaults to current directory)
function vv() {
  local target_dirs=(${@:-"."})
  local suffix="/*(.)"
  local target_dirs_with_suffix=( ${target_dirs[@]/%/$suffix} )
  local target_files=( $~target_dirs_with_suffix[@] )
  vim $target_files
}

# Open all files recursively in the given directories in vim, excluding directories
# Usage: vvr <directories> (defaults to current directory)
function vvr() {
  local target_dirs=(${@:-"."})
  local suffix="/**/*(.)"
  local target_dirs_with_suffix=( ${target_dirs[@]/%/$suffix} )
  local target_files=( $~target_dirs_with_suffix[@] )
  vim $target_files
}

# Search for files within the current directory whose filename contains a given string
# Usage: search <filename>
function search() {
  find . -iname "*$@*" | less
}

# Create a symlink to the current directory in ~/Quicklinks/
# Usage: mkql <name of quicklink>
function mkql() {
  if [ -d ~/Quicklinks/ ]; then
    ln -s "$(pwd -P)" ~/Quicklinks/"$1"
  else
    echo "Error: ~/Quicklinks/ does not exist."
  fi
}

# Execute a command in all tmux panes
# Usage: all <command>
# Warning: does not work very well if you have vim open in one of the panes; it'll just type out the command letter by letter in vim
function all() {
  local cmd="$*"
  local active_pane_id=$TMUX_PANE
  local pane_ids=($(tmux list-panes -F '#{pane_id}'))
  for pane_id in $pane_ids; do
    if [[ $pane_id != $active_pane_id ]]; then
      local CR=C-m # Carriage return in tmux
      tmux send-keys -t $pane_id "$cmd" $CR
    fi
  done

  # Execute the command in the active pane (i.e. the pane executing this function) last.
  # This is because a command may involve termination of the pane, and we don't want to
  # terminate the active pane before it could send out the command to other panes.
  eval $cmd
}
